'fileTypes': [
  'tcl'
]
'firstLineMatch': '^#!/.*\\btclsh\\b'
'name': 'Tcl'
'patterns': [
  {
    'begin': '(?<=^|;)\\s*((#))'
    'beginCaptures':
      '1':
        'name': 'comment.line.number-sign.tcl'
      '2':
        'name': 'punctuation.definition.comment.tcl'
    'contentName': 'comment.line.number-sign.tcl'
    'end': '\\n'
    'patterns': [
      {
        'match': '(\\\\\\\\|\\\\\\n)'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.tcl'
    'match': '(?<=^|[\\[{;])\\s*(if|while|for|catch|return|break|continue|switch|exit|foreach)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.tcl'
    'match': '(?<=^|})\\s*(then|elseif|else)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.tcl'
      '2':
        'name': 'entity.name.function.tcl'
    'match': '^\\s*(proc)\\s+([^\\s]+)'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.tcl'
    'match': '(?<=^|[\\[{;])\\s*(after|append|apply|array|auto_execok|auto_import|auto_load|auto_load_index|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bell|binary|bind|bindtags|break|button|canvas|case|catch|cd|chan|checkbutton|clipboard|clock|close|concat|continue|coroutine|destroy|dict|encoding|entry|eof|error|eval|event|exec|exit|expr|fblocked|fconfigure|fcopy|file|fileevent|flush|focus|font|for|foreach|format|frame|gets|glob|global|grab|grid|history|if|image|incr|info|interp|join|label|labelframe|lappend|lassign|lindex|linsert|list|listbox|llength|lmap|load|loadvfs|lower|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|menu|menubutton|message|namespace|open|option|pack|package|panedwindow|pid|pkg_mkIndex|place|proc|puts|pwd|radiobutton|raise|read|rechan|regexp|regsub|rename|return|scale|scan|scrollbar|seek|selection|send|set|socket|source|spinbox|split|string|subst|switch|tailcall|tclLog|tclPkgSetup|tclPkgUnknown|tcl_findLibrary|tell|text|throw|time|tk|tk_chooseColor|tk_chooseDirectory|tk_getOpenFile|tk_getSaveFile|tk_menuSetFocus|tk_messageBox|tk_popup|tk_textCopy|tk_textCut|tk_textPaste|tkwait|toplevel|trace|try|unknown|unload|unset|update|uplevel|upvar|variable|vwait|while|winfo|wm|yield|yieldto|zlib|\:\:ttk\:\:CancelRepeat|\:\:ttk\:\:CursorSampler|\:\:ttk\:\:GuessTakeFocus|\:\:ttk\:\:Repeat|\:\:ttk\:\:Repeatedly|\:\:ttk\:\:RestoreGrab|\:\:ttk\:\:SaveGrab|\:\:ttk\:\:ThemeChanged|\:\:ttk\:\:bindMouseWheel|\:\:ttk\:\:button|\:\:ttk\:\:checkbutton|\:\:ttk\:\:clickToFocus|\:\:ttk\:\:combobox|\:\:ttk\:\:copyBindings|\:\:ttk\:\:cursor|\:\:ttk\:\:deprecated|\:\:ttk\:\:entry|\:\:ttk\:\:focusFirst|\:\:ttk\:\:frame|\:\:ttk\:\:globalGrab|\:\:ttk\:\:grabWindow|\:\:ttk\:\:label|\:\:ttk\:\:labelframe|\:\:ttk\:\:menubutton|\:\:ttk\:\:notebook|\:\:ttk\:\:paned|\:\:ttk\:\:panedwindow|\:\:ttk\:\:progressbar|\:\:ttk\:\:radiobutton|\:\:ttk\:\:releaseGrab|\:\:ttk\:\:scale|\:\:ttk\:\:scrollbar|\:\:ttk\:\:separator|\:\:ttk\:\:setCursor|\:\:ttk\:\:setTheme|\:\:ttk\:\:sizegrip|\:\:ttk\:\:spinbox|\:\:ttk\:\:style|\:\:ttk\:\:takefocus|\:\:ttk\:\:takesFocus|\:\:ttk\:\:themes|\:\:ttk\:\:traverseTo|\:\:ttk\:\:treeview)\\b'
  }
  {
    'begin': '(?<=^|[\\[{;])\\s*(regexp|regsub)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.tcl'
    'comment': 'special-case regexp/regsub keyword in order to handle the expression'
    'end': '[\\n;\\]]'
    'patterns': [
      {
        'match': '\\\\(?:.|\\n)'
        'name': 'constant.character.escape.tcl'
      }
      {
        'comment': 'switch for regexp'
        'match': '-\\w+\\s*'
      }
      {
        'applyEndPatternLast': 1
        'begin': '--\\s*\\w+'
        'comment': 'end of switches'
        'end': ''
        'patterns': [
          {
            'include': '#regexp'
          }
        ]
      }
      {
        'include': '#regexp'
      }
    ]
  }
  {
    'include': '#escape'
  }
  {
    'include': '#variable'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.tcl'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.tcl'
    'name': 'string.quoted.double.tcl'
    'patterns': [
      {
        'include': '#escape'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#embedded'
      }
    ]
  }
]
'repository':
  'bare-string':
    'begin': '(?:^|(?<=\\s))"'
    'comment': 'matches a single quote-enclosed word without scoping'
    'end': '"([^\\s\\]]*)'
    'endCaptures':
      '1':
        'name': 'invalid.illegal.tcl'
    'patterns': [
      {
        'include': '#escape'
      }
      {
        'include': '#variable'
      }
    ]
  'braces':
    'begin': '(?:^|(?<=\\s))\\{'
    'comment': 'matches a single brace-enclosed word'
    'end': '\\}([^\\s\\]]*)'
    'endCaptures':
      '1':
        'name': 'invalid.illegal.tcl'
    'patterns': [
      {
        'match': '\\\\[{}\\n]'
        'name': 'constant.character.escape.tcl'
      }
      {
        'include': '#inner-braces'
      }
    ]
  'embedded':
    'begin': '\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.section.embedded.begin.tcl'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.section.embedded.end.tcl'
    'name': 'source.tcl.embedded'
    'patterns': [
      {
        'include': 'source.tcl'
      }
    ]
  'escape':
    'match': '\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)'
    'name': 'constant.character.escape.tcl'
  'inner-braces':
    'begin': '\\{'
    'comment': 'matches a nested brace in a brace-enclosed word'
    'end': '\\}'
    'patterns': [
      {
        'match': '\\\\[{}\\n]'
        'name': 'constant.character.escape.tcl'
      }
      {
        'include': '#inner-braces'
      }
    ]
  'regexp':
    'begin': '(?=\\S)(?![\\n;\\]])'
    'comment': 'matches a single word, named as a regexp, then swallows the rest of the command'            
    'end': '(?=[\\n;\\]])'
    'patterns': [
      {
        'begin': '(?=[^ \\t\\n;])'
        'end': '(?=[ \\t\\n;])'
        'name': 'string.regexp.tcl'
        'patterns': [
          {
            'include': '#braces'
          }
          {
            'include': '#bare-string'
          }
          {
            'include': '#escape'
          }
          {
            'include': '#variable'
          }
          {
            'include': '#string'
          }        
        ]
      }
      {
        'begin': '[ \\t]'
        'comment': 'swallow the rest of the command'
        'end': '(?=[\\n;\\]])'
        'patterns': [
          {
            'include': '#variable'
          }
          {
            'include': '#embedded'
          }
          {
            'include': '#escape'
          }
          {
            'include': '#braces'
          }
          {
            'include': '#inner-braces'
          }          
        ]
      }
    ]
  'string':
    'applyEndPatternLast': 1
    'begin': '(?:^|(?<=\\s))(?=")'
    'comment': 'matches a single quote-enclosed word with scoping'
    'end': ''
    'name': 'string.quoted.double.tcl'
    'patterns': [
      {
        'include': '#bare-string'
      }
    ]
  'variable':
    'captures':
      '1':
        'name': 'punctuation.definition.variable.tcl'
    'match': '(\\$)((?:[a-zA-Z0-9_]|::)+(\\([^\\)]+\\))?|\\{[^\\}]*\\})'
    'name': 'variable.other.tcl'
'scopeName': 'source.tcl'
